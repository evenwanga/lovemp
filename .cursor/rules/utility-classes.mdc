---
description:
globs:
alwaysApply: true
---
# 工具类使用指南

## 参考文档
项目中的工具类使用请参考 [工具类使用手册.md](mdc:工具类使用手册.md)，该手册详细介绍了各工具类的功能、适用场景和使用示例。

## 工具类使用原则

在开发过程中，应遵循以下原则使用工具类：

1. **优先使用现有工具类**：在编写业务逻辑前，先查阅工具类手册，确认是否有现成的工具方法可用
2. **避免重复实现**：不要重复实现已有工具类中的功能，应直接引用工具类
3. **领域封装**：在领域层中，应将工具类封装为领域服务，而非直接调用工具类
4. **遵循单一职责**：每个工具类应专注于单一类型的功能，不要混合不相关的功能
5. **编写单元测试**：为工具类的使用编写充分的单元测试，确保功能正确性

## 现有工具类列表

项目中已有以下工具类：

- BeanUtils - Bean对象工具类
- ValidateUtils - 数据验证工具类
- DateTimeUtils - 日期时间工具类
- StringUtils - 字符串工具类
- EncryptionUtils - 加密工具类
- FileUtils - 文件工具类
- HttpUtils - HTTP请求工具类
- JsonUtils - JSON工具类
- CollectionUtils - 集合工具类
- ReflectionUtils - 反射工具类
- IdGenerator - ID生成工具类
- Assert - 断言工具类

## 工具类抽象指南

在开发过程中，考虑以下情况来识别可能需要抽象出新工具类的场景：

1. **重复代码模式**：当发现多处代码在处理同一类问题时
2. **跨领域功能**：当某功能在多个领域中都需要使用时
3. **通用操作封装**：将常见的、复杂的操作封装为简单API
4. **技术细节隔离**：隔离特定技术实现的复杂性

### 抽象新工具类的检查清单

在抽象新工具类前，请检查：

- [ ] 功能是否确实是跨领域的通用功能
- [ ] 是否与现有工具类有明确的职责区分
- [ ] 是否符合工具类的命名约定（以Utils或者Generator等结尾）
- [ ] 是否提供了足够的文档注释
- [ ] 是否有单元测试覆盖关键功能
- [ ] 方法签名是否清晰易用
- [ ] 是否考虑了异常处理
- [ ] 是否考虑了性能因素

### 工具类命名规范

新的工具类应遵循以下命名规范：

- 类名：功能域名+Utils（如StringUtils、DateTimeUtils）
- 方法名：动词+名词，清晰表达功能（如parseDate、formatNumber）
- 常量：全大写，下划线分隔（如DEFAULT_DATE_FORMAT）

### 工具类注释模板

新工具类应使用如下注释模板：

```java
/**
 * 工具类名称
 * 
 * <p>提供的主要功能和用途概述</p>
 * 
 * <h2>功能分类</h2>
 * <ol>
 *   <li>功能类别1：具体功能</li>
 *   <li>功能类别2：具体功能</li>
 * </ol>
 * 
 * <h2>适用场景</h2>
 * <ol>
 *   <li>适用场景1</li>
 *   <li>适用场景2</li>
 * </ol>
 * 
 * <h2>代码示例</h2>
 * <pre>
 * // 使用示例代码
 * </pre>
 * 
 * <h2>使用注意事项</h2>
 * <ol>
 *   <li>注意事项1</li>
 *   <li>注意事项2</li>
 * </ol>
 */
```
